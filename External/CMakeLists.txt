project (External)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/External")
include(FindDirectX)
include(FindWindowsSDK)

SET(ASSIMP_BUILD_IFC_IMPORTER False CACHE BOOL "" FORCE)
SET(ASSIMP_BUILD_ASSIMP_TOOLS False CACHE BOOL "" FORCE)
SET(ASSIMP_BUILD_ASSIMP_VIEW False CACHE BOOL "" FORCE)
SET(ASSIMP_BUILD_TESTS False CACHE BOOL "" FORCE)
SET(ASSIMP_INSTALL_PDB False CACHE BOOL "" FORCE)
add_subdirectory("assimp")
target_include_directories(assimp PUBLIC "${CMAKE_CURRENT_LIST_DIR}/assimp/include" "${CMAKE_CURRENT_BINARY_DIR}/assimp/include")

if(WIN32)
    project(DirectXTex)
    add_definitions(-D_OPENMP)
    file(GLOB SOURCES "DirectXTex/DirectXTex/*.cpp" "DirectXTex/DirectXTex/*.h")
    add_library(DirectXTex STATIC ${SOURCES})
    target_include_directories(DirectXTex PUBLIC "${CMAKE_CURRENT_LIST_DIR}/DirectXTex/DirectXTex")
    #add_custom_command(TARGET DirectXTex PRE_BUILD WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/DirectXTex/DirectXTex/Shaders" COMMAND "CompileShaders.cmd" )
endif()

SET(NEWTON_BUILD_SANDBOX_DEMOS False CACHE BOOL "" FORCE)
SET(NEWTON_BUILD_PROFILER False CACHE BOOL "" FORCE)
SET(NEWTON_STATIC_RUNTIME_LIBRARIES False CACHE BOOL "" FORCE)
add_subdirectory("newton-dynamics")
target_include_directories(newton PUBLIC "${CMAKE_CURRENT_LIST_DIR}/newton-dynamics/newton-3.14/sdk/dgNewton")

project(imgui_gek)
add_definitions(-DNO_IMGUITOOLBAR)
add_definitions(-DNO_IMGUIPANELMANAGER)
add_definitions(-DNO_IMGUISTRING)
add_definitions(-DNO_IMGUIHELPER)
add_definitions(-DNO_IMGUIFILESYSTEM)
add_definitions(-DNO_IMGUICODEEDITOR)
add_definitions(-DNO_IMGUILISTVIEW)
add_definitions(-DNO_IMGUINODEGRAPHEDITOR)
add_definitions(-DIMGUI_INCLUDE_IMGUI_USER_H -DIMGUI_INCLUDE_IMGUI_USER_INL)
add_definitions(-DIMGUI_DEFINE_MATH_OPERATORS -DIMGUI_DEFINE_PLACEMENT_NEW)
file(GLOB SOURCES "imgui/*.cpp" "imgui/*.h")
add_library(imgui_gek STATIC ${SOURCES})
target_include_directories(imgui_gek PUBLIC "${CMAKE_CURRENT_LIST_DIR}/imgui")

project(signals)
add_library(signals INTERFACE)
target_include_directories(signals INTERFACE "${CMAKE_CURRENT_LIST_DIR}/Wink-Signals")

project(nlohmann_json)
add_library(nlohmann_json INTERFACE)
target_include_directories(nlohmann_json INTERFACE "${CMAKE_CURRENT_LIST_DIR}/json/single_include")